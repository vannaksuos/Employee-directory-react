{"version":3,"sources":["components/JumboTron.js","components/SearchBox.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","SearchBox","props","for","type","id","onChange","handleChange","Table","scope","style","cursor","onClick","onClickSort","filterEmployees","map","employee","index","dob","Date","date","name","first","last","cell","toLocaleDateString","App","useState","employees","setEmployees","setFilterEmployees","useEffect","axios","get","then","response","console","log","data","results","JumboTron","event","target","value","foundEmployees","filter","toLowerCase","includes","matchSearch","filter2","sort","a","b","nameA","toUpperCase","nameB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0RAeeA,MAXf,WACI,OACI,yBAAKC,UAAU,6BACvB,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,2BCMWC,MAXf,SAAoBC,GAChB,OAEJ,yBAAKF,UAAU,YACX,yBAAKA,UAAU,mCACb,2BAAOG,IAAI,eAAX,0DACA,2BAAOC,KAAK,QAAQJ,UAAU,eAAeK,GAAG,cAAcC,SAAUJ,EAAMK,kBCyBrEC,MA9Bf,SAAgBN,GAEZ,OACI,2BAAOF,UAAU,oBACzB,+BACI,4BACA,wBAAIS,MAAM,OAAV,MACA,wBAAIC,MAAO,CAACC,OAAO,WAAYC,QAASV,EAAMW,YAAaJ,MAAM,OAAjE,aACA,wBAAIA,MAAM,OAAV,oBACA,wBAAIA,MAAM,OAAV,mBAGJ,+BACKP,EAAMY,gBAAgBC,KAAI,SAACC,EAAUC,GAClC,IAAMC,EAAM,IAAIC,KAAKH,EAASE,IAAIE,MAClC,OACI,4BACA,wBAAIX,MAAM,OAAOQ,EAAQ,GACzB,4BAAKD,EAASK,KAAKC,MAAnB,IAA2BN,EAASK,KAAKE,MACzC,4BAAKP,EAASQ,MACd,4BAAKN,EAAIO,6B,iBCkDNC,MAnEf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEiCF,mBAAS,IAF1C,mBAENb,EAFM,KAEWgB,EAFX,KAwDb,OA/BFC,qBAAU,WACRC,IAAMC,IAAI,gDAAgDC,MAAK,SAASC,GACtEC,QAAQC,IAAIF,GACZN,EAAaM,EAASG,KAAKC,SAC3BT,EAAmBK,EAASG,KAAKC,cAElC,IA0BC,yBAAKvC,UAAU,OACnB,kBAACwC,EAAD,MACA,kBAAC,EAAD,CAAWjC,aAxDY,SAACkC,GACpB,GAA0B,KAAvBA,EAAMC,OAAOC,MAAhB,CAEA,IAAMC,EAAiB9B,EAAgB+B,QAAO,SAAA7B,GAC5C,QAQN,SAAsBA,EAAUyB,GAE9B,IAAMvB,EAAM,IAAIC,KAAKH,EAASE,IAAIE,MAElC,OAAOJ,EAASK,KAAKC,MAAMwB,cAAcC,SAASN,EAAMC,OAAOC,MAAMG,gBACrE9B,EAASK,KAAKE,KAAKuB,cAAcC,SAASN,EAAMC,OAAOC,MAAMG,gBAC7D9B,EAASQ,KAAKuB,SAASN,EAAMC,OAAOC,QACpCzB,EAAIO,qBAAqBsB,SAASN,EAAMC,OAAOC,OAfvCK,CAAYhC,EAAUyB,MAI5BX,EAAmBc,QAPYd,EAAmBF,MAwDtD,kBAAC,EAAD,CAAOA,UAAaA,EAAWd,gBAAmBA,EAAiBD,YA3BnE,WACC,GAAIC,EAAJ,CACC,IAAMmC,EAAUnC,EAAgBC,KAAI,SAAAC,GAAQ,OAAIA,KAEhDiC,EAAQC,MAAK,SAASC,EAAGC,GACvB,IAAIC,EAAQF,EAAE9B,KAAKC,MAAMgC,cACrBC,EAAQH,EAAE/B,KAAKC,MAAMgC,cAEzB,OAAID,EAAQE,GACF,EAENF,EAAQE,EACH,EAIF,KAGTzB,EAAmBmB,SChDDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.3c2f7911.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nfunction Jumbotron () {\r\n    return(\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n<div className=\"container\">\r\n    <h1 className=\"display-4\">Employee Directory</h1>\r\n    <p className=\"lead\">Search Employee Info</p>\r\n</div>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron","import React from 'react'\r\n\r\n\r\n\r\nfunction SearchBox (props) {\r\n    return (\r\n\r\n<div className=\"form-row\">\r\n    <div className=\"form-group col-md-4 offset-md-4\">\r\n      <label for=\"inputEmail4\">Search Employee by Name, Cellphone #, or date of birth</label>\r\n      <input type=\"email\" className=\"form-control\" id=\"inputEmail4\" onChange={props.handleChange}/>\r\n    </div>\r\n  </div>\r\n)}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\n\r\n\r\n\r\nfunction Table (props) {\r\n\r\n    return(\r\n        <table className=\"table table-dark\">\r\n<thead>\r\n    <tr>\r\n    <th scope=\"col\"> #</th>\r\n    <th style={{cursor:\"pointer\"}} onClick={props.onClickSort} scope=\"col\">Full Name</th>\r\n    <th scope=\"col\">Cellphone Number</th>\r\n    <th scope=\"col\">Date of Birth</th>\r\n    </tr>\r\n</thead>\r\n<tbody>\r\n    {props.filterEmployees.map((employee, index) => {\r\n        const dob = new Date(employee.dob.date);\r\n        return (\r\n            <tr>\r\n            <th scope=\"row\">{index + 1}</th>\r\n            <td>{employee.name.first} {employee.name.last}</td>\r\n            <td>{employee.cell}</td>\r\n            <td>{dob.toLocaleDateString()}</td>\r\n            </tr>\r\n        )\r\n    })}\r\n\r\n</tbody>\r\n</table>\r\n    )\r\n}\r\n\r\nexport default Table","import React, {useEffect, useState} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport JumboTron from './components/JumboTron';\nimport SearchBox from './components/SearchBox';\nimport Table from './components/Table';\nimport axios from 'axios';\n\nfunction App() {\n  const [employees, setEmployees] = useState([]);\n  const [filterEmployees, setFilterEmployees] = useState([]);\n  const handleChange = (event) => {\n    if(event.target.value === \"\") {setFilterEmployees(employees) \n      return;}\n    const foundEmployees = filterEmployees.filter(employee => {\n      if( matchSearch(employee, event))\n      return true;\n      else return false;\n    })\n    setFilterEmployees(foundEmployees)\n    \n  }\n\nfunction matchSearch (employee, event) {\n  \n  const dob = new Date(employee.dob.date);\n\n  return employee.name.first.toLowerCase().includes(event.target.value.toLowerCase()) ||\n  employee.name.last.toLowerCase().includes(event.target.value.toLowerCase()) ||\n  employee.cell.includes(event.target.value)||\n  dob.toLocaleDateString().includes(event.target.value);\n}\n\nuseEffect(()=> {\n  axios.get('https://randomuser.me/api/?results=50&nat=US').then(function(response) {\n    console.log(response)\n    setEmployees(response.data.results);\n    setFilterEmployees(response.data.results);\n  })\n}, []);\n\nfunction onClickSort() {\n if(!filterEmployees) return\n  const filter2 = filterEmployees.map(employee => employee)\n\n  filter2.sort(function(a, b) {\n    var nameA = a.name.first.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.name.first.toUpperCase(); // ignore upper and lowercase\n\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n  \n    // names must be equal\n    return 0;\n  });\n  debugger;\n  setFilterEmployees(filter2)\n\n}\n  \n  return (\n    <div className=\"App\">\n<JumboTron/>\n<SearchBox handleChange = {handleChange}/>\n<Table employees = {employees} filterEmployees = {filterEmployees} onClickSort ={onClickSort} />\n\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}